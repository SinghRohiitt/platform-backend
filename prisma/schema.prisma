// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())     // Primary Key
  name      String
  email     String    @unique
  password  String
  role      Role      @default(USER)          // ENUM (ADMIN/USER)
  
  // Relations
  projects  Project[] // user ke multiple projects
  tasks     Task[]    // user ke multiple tasks (assigned)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// 2. Project Model
model Project {
  id          String   @id @default(uuid())
  title       String
  description String?

  // Relation with User (owner)
  ownerId String
  owner   User     @relation(fields: [ownerId], references: [id])

  // Relation with Task
  tasks   Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 3. Task Model
model Task {
  id          String   @id @default(uuid())
  title       String
  description String?

  status      TaskStatus   @default(PENDING)   // ENUM: PENDING / COMPLETED
  priority    TaskPriority                        // ENUM: LOW / MEDIUM / HIGH (user must provide)

  // Relation with Project
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  // Relation with User (assignee)
  assignedTo String
  assigned   User    @relation(fields: [assignedTo], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// ==================== ENUMS ====================

enum Role {
  ADMIN
  USER
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}